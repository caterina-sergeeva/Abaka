# -*- coding: utf-8 -*-
# Author: vezype

# ------------- –ò–º–ø–æ—Ä—Ç—ã -------------
import asyncio

import sqlite3

import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import BotCommand
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# ------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è -------------
TOKEN = '5257584597:AAG0KcRHRUWLS8yw2H-J5wBwjb0z_026O1s'
DATABASE_PATH = 'database.sqlite3'
logging.basicConfig(level=logging.INFO)


# ------------- –ö–ª–∞—Å—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö -------------
class Database:
    def __init__(self, path: str):
        self.con = sqlite3.connect(path)
        self.cur = self.con.cursor()

    def create_profile(self, user_id: int, nick: str, team_name: str, avatar: str or None) -> bool:
        try:
            request = 'INSERT INTO profiles VALUES(?, ?, ?, ?)'
            data = (user_id, nick, team_name, avatar)
            self.cur.execute(request, data)
            self.con.commit()
            logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª –ø—Ä–æ—Ñ–∏–ª—å!')
            return True
        except Exception as error_msg:
            logging.info(f'–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "{error_msg}".')
            return False

    def profile_exist(self, user_id: int) -> bool:
        try:
            request = 'SELECT * FROM profiles WHERE user_id = ?'
            data = (user_id,)
            response = self.cur.execute(request, data).fetchone()
            if response:
                return True
            else:
                return False
        except Exception as error_msg:
            logging.info(f'–ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "{error_msg}".')
            return False

    def get_profile(self, user_id: int) -> tuple or None:
        try:
            request = 'SELECT * FROM profiles WHERE user_id = ?'
            data = (user_id,)
            response = self.cur.execute(request, data).fetchone()
            if response:
                return response
            else:
                return False
        except Exception as error_msg:
            logging.info(f'–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "{error_msg}".')
            return False

    def create_game(self, code: str) -> bool:
        try:
            request = 'INSERT INTO games(code) VALUES(?)'
            data = (code,)
            self.cur.execute(request, data)
            self.con.commit()
            logging.info(f'–ò–≥—Ä–∞ —Å –∫–æ–¥–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è "{code}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!')
            return True
        except Exception as error_msg:
            logging.info(f'–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "{error_msg}".')
            return False

    def game_exist(self, code: str) -> bool:
        try:
            request = 'SELECT * FROM games WHERE code = ?'
            data = (code,)
            response = self.cur.execute(request, data).fetchone()
            if response:
                return True
            else:
                return False
        except Exception as error_msg:
            logging.info(f'–ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–≥—Ä—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "{error_msg}".')
            return False

    def delete_game(self, code: str) -> bool:
        try:
            request = 'DELETE from games WHERE code = ?'
            data = (code,)
            self.cur.execute(request, data)
            self.con.commit()
            logging.info(f'–ò–≥—Ä–∞ —Å –∫–æ–¥–æ–º "{code}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!')
            return True
        except Exception as error_msg:
            logging.info(f'–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã —Å –∫–æ–¥–æ–º "{code}" –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "{error_msg}".')
            return False

    def set_avatar(self, user_id: int, avatar: str) -> bool:
        try:
            request = 'UPDATE profiles SET avatar = ? WHERE user_id = ?'
            data = (avatar, user_id)
            self.cur.execute(request, data)
            self.con.commit()
            logging.info(f'–ê–≤–∞—Ç–∞—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
            return True
        except Exception as error_msg:
            logging.info(f'–ü—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–≤–∞—Ç–∞—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "{error_msg}".')
            return False

    def set_nick(self, user_id: int, nick: str) -> bool:
        try:
            request = 'UPDATE profiles SET nick = ? WHERE user_id = ?'
            data = (nick, user_id)
            self.cur.execute(request, data)
            self.con.commit()
            logging.info(f'–ù–∏–∫–Ω–µ–π–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
            return True
        except Exception as error_msg:
            logging.info(f'–ü—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∏–∫–Ω–µ–π–º–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "{error_msg}".')
            return False

    def delete_avatar(self, user_id: int) -> bool:
        try:
            request = 'UPDATE profiles SET avatar = ? WHERE user_id = ?'
            data = (None, user_id)
            self.cur.execute(request, data)
            self.con.commit()
            logging.info(f'–ê–≤–∞—Ç–∞—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!')
            return True
        except Exception as error_msg:
            logging.info(f'–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "{user_id}" –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "{error_msg}".')
            return False

    def get_avatar(self, user_id: int) -> str or None:
        try:
            request = 'SELECT * FROM profiles WHERE user_id = ?'
            data = (user_id,)
            response = self.cur.execute(request, data).fetchone()[-1]
            return response
        except Exception as error_msg:
            logging.info(f'–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "{error_msg}".')
            return None

    def get_nick(self, user_id: int) -> str or None:
        try:
            request = 'SELECT * FROM profiles WHERE user_id = ?'
            data = (user_id,)
            response = self.cur.execute(request, data).fetchone()[1]
            return response
        except Exception as error_msg:
            logging.info(f'–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∏–∫–Ω–µ–π–º–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "{error_msg}".')
            return None

    def set_team_name(self, user_id: int, team_name: str) -> bool:
        try:
            request = 'UPDATE profiles SET team_name = ? WHERE user_id = ?'
            data = (team_name, user_id)
            self.cur.execute(request, data)
            self.con.commit()
            logging.info(f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!')
            return True
        except Exception as error_msg:
            logging.info(f'–ü—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "{error_msg}".')
            return False

    def get_team_name(self, user_id: int) -> str or None:
        try:
            request = 'SELECT * FROM profiles WHERE user_id = ?'
            data = (user_id,)
            response = self.cur.execute(request, data).fetchone()[2]
            return response
        except Exception as error_msg:
            logging.info(f'–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "{error_msg}".')
            return None


# ------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤ -------------
bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())
db = Database(DATABASE_PATH)


# ------------- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–æ—Ç–∞ –∫ –∑–∞–ø—É—Å–∫—É -------------
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command='/start', description='- –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.'),
        BotCommand(command='/menu', description='- –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é.'),
        BotCommand(command='/cancel', description='- –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.'),
        BotCommand(command='/game', description='- –≤—ã–∑–≤–∞—Ç—å –∏–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é.'),
        BotCommand(command='/profile', description='- –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.')
    ]
    await bot.set_my_commands(commands)


# ------------- Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã -------------
buttons_for_menu = [
    types.InlineKeyboardButton('üéÆ –ò–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é', callback_data='game_menu'),
    types.InlineKeyboardButton('üßë‚Äçüíª –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='my_profile')
]
keyboard_for_menu = types.InlineKeyboardMarkup(row_width=1)
keyboard_for_menu.add(*buttons_for_menu)

buttons_for_profile = [
    types.InlineKeyboardButton('üßë‚Äçüíª –ù–∏–∫', callback_data='nick'),
    types.InlineKeyboardButton('üë®‚Äçüë©‚Äçüë¶ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã', callback_data='team_name'),
    types.InlineKeyboardButton('üñº –ê–≤–∞—Ç–∞—Ä', callback_data='avatar')
]
keyboard_for_profile = types.InlineKeyboardMarkup(row_width=1)
keyboard_for_profile.add(*buttons_for_profile)

buttons_for_game_menu = [
    types.InlineKeyboardButton('‚úè –í–≤–µ—Å—Ç–∏ –∫–æ–¥', callback_data='input_code'),
    types.InlineKeyboardButton('ü§ñ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', callback_data='game_connection')
]
keyboard_for_game_menu = types.InlineKeyboardMarkup(row_width=1)
keyboard_for_game_menu.add(*buttons_for_game_menu)


# ------------- –°–æ—Å—Ç–æ—è–Ω–∏—è -------------
class States(StatesGroup):
    game_state = State()
    input_code_state = State()
    change_nick_state = State()
    change_team_name_state = State()
    change_avatar_state = State()


# ------------- –•—ç–Ω–¥–ª–µ—Ä—ã –Ω–∞ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã -------------
@dp.message_handler(commands='start')
async def start(message: types.Message):
    try:
        user = message.from_user
        user_id = user.id
        full_name = user.full_name
        text = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {full_name} üëã\n\n'

        await message.answer(text)

        profile_exist = db.profile_exist(user_id)
        if profile_exist:
            profile = db.get_profile(user_id)
            nick = profile[1]
            team_name = profile[2]
            avatar = profile[3]

            text = f'üí¨ –£ –í–∞—Å –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å..\n\n' \
                   f'üßë‚Äçüíª –ù–∏–∫: {nick}\n' \
                   f'üë®‚Äçüë©‚Äçüë¶ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {team_name}\n' \
                   f'üñº –ê–≤–∞—Ç–∞—Ä: {"–µ—Å—Ç—å" if avatar else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}\n\n' \
                   f'/menu - –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–≥—Ä–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.\n' \
                   f'/game - –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–≥—Ä–µ.'

            if avatar:
                await message.answer_photo(avatar, text)
            else:
                await message.answer(text)

            return

        db.create_profile(user_id, f'nick{user_id}', f'team{user_id}', None)
        nick = f'nick{user_id}'
        team_name = f'team{user_id}'
        avatar = None

        text = f'üí¨ –£ –í–∞—Å –Ω–µ –±—ã–ª–æ –ø—Ä–æ—Ñ–∏–ª—è, –±–æ—Ç —Å–æ–∑–¥–∞–ª –µ–≥–æ. –ß—É—Ç—å –ø–æ–∑–∂–µ –í—ã —Å–º–æ–∂–µ—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å.\n\n' \
               f'üßë‚Äçüíª –ù–∏–∫: {nick}\n' \
               f'üë®‚Äçüë©‚Äçüë¶ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {team_name}\n' \
               f'üñº –ê–≤–∞—Ç–∞—Ä: {"–µ—Å—Ç—å" if avatar else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}\n\n' \
               f'/menu - –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–≥—Ä–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.\n' \
               f'/game - –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–≥—Ä–µ.'

        await message.answer(text)
    except Exception as error_msg:
        logging.info(f'–í —Ö—ç–Ω–¥–ª–µ—Ä–µ start –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "{error_msg}".')


@dp.message_handler(commands='menu')
async def menu(message: types.Message):
    try:
        user = message.from_user
        user_id = user.id
        first_name = user.first_name

        if not db.profile_exist(user_id):
            await message.answer('‚ö† –°–Ω–∞—á–∞–ª–∞ –í–∞–º –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: /start')
            return

        text = f'{first_name}, –Ω–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–≤–µ –∫–Ω–æ–ø–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.\n\n' \
               f'üìù –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å - —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.'

        await message.answer(text, reply_markup=keyboard_for_menu)
    except Exception as error_msg:
        logging.info(f'–í —Ö—ç–Ω–¥–ª–µ—Ä–µ menu –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "{error_msg}".')


@dp.callback_query_handler(text='my_profile')
async def my_profile_query(call: types.CallbackQuery):
    try:
        user = call.from_user
        user_id = user.id

        profile = db.get_profile(user_id)
        nick = profile[1]
        team_name = profile[2]
        avatar = profile[3]

        text = f'üí¨ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å..\n\n' \
               f'üßë‚Äçüíª –ù–∏–∫: {nick}\n' \
               f'üë®‚Äçüë©‚Äçüë¶ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {team_name}\n' \
               f'üñº –ê–≤–∞—Ç–∞—Ä: {"–µ—Å—Ç—å" if avatar else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}\n\n' \
               f'/game - –≤—ã–∑–≤–∞—Ç—å –∏–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é.'

        await call.message.edit_text(text, reply_markup=keyboard_for_profile)
        await call.answer()
    except Exception as error_msg:
        logging.info(f'–í —Ö—ç–Ω–¥–ª–µ—Ä–µ my_profile_query –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "{error_msg}".')


@dp.callback_query_handler(text='nick')
async def change_nick_query(call: types.CallbackQuery):
    try:
        user = call.from_user
        user_id = user.id
        first_name = user.first_name

        await States.change_nick_state.set()

        text = f'{first_name}, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º..\n\n' \
               f'/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.'

        await call.answer(text, show_alert=True)

        @dp.message_handler(state=States.change_nick_state, content_types='text')
        async def get_nick(message: types.Message, state: FSMContext):
            nick = message.text

            if nick == '/cancel':
                await message.answer('–¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
                await state.finish()
                return

            db.set_nick(user_id, nick)

            profile = db.get_profile(user_id)
            nick = profile[1]
            team_name = profile[2]
            avatar = profile[3]

            text = f'üí¨ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å..\n\n' \
                   f'üßë‚Äçüíª –ù–∏–∫: {nick}\n' \
                   f'üë®‚Äçüë©‚Äçüë¶ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {team_name}\n' \
                   f'üñº –ê–≤–∞—Ç–∞—Ä: {"–µ—Å—Ç—å" if avatar else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}\n\n' \
                   f'/game - –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–≥—Ä–µ.'

            await call.message.edit_text(text, reply_markup=keyboard_for_profile)
            await state.finish()
    except Exception as error_msg:
        logging.info(f'–í —Ö—ç–Ω–¥–ª–µ—Ä–µ change_nick_query –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "{error_msg}".')


@dp.callback_query_handler(text='team_name')
async def change_team_name_query(call: types.CallbackQuery):
    try:
        user = call.from_user
        user_id = user.id
        first_name = user.first_name

        await States.change_team_name_state.set()

        text = f'{first_name}, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã..\n\n' \
               f'/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.'

        await call.answer(text, show_alert=True)

        @dp.message_handler(state=States.change_team_name_state, content_types='text')
        async def get_team_name(message: types.Message, state: FSMContext):
            team_name = message.text

            if team_name == '/cancel':
                await message.answer('–¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
                await state.finish()
                return

            db.set_team_name(user_id, team_name)

            profile = db.get_profile(user_id)
            nick = profile[1]
            team_name = profile[2]
            avatar = profile[3]

            text = f'üí¨ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å..\n\n' \
                   f'üßë‚Äçüíª –ù–∏–∫: {nick}\n' \
                   f'üë®‚Äçüë©‚Äçüë¶ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {team_name}\n' \
                   f'üñº –ê–≤–∞—Ç–∞—Ä: {"–µ—Å—Ç—å" if avatar else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}\n\n' \
                   f'/game - –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–≥—Ä–µ.'

            await call.message.edit_text(text, reply_markup=keyboard_for_profile)
            await state.finish()
    except Exception as error_msg:
        logging.info(f'–í —Ö—ç–Ω–¥–ª–µ—Ä–µ change_team_name_query –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "{error_msg}".')


@dp.callback_query_handler(text='avatar')
async def change_avatar_query(call: types.CallbackQuery):
    try:
        user = call.from_user
        user_id = user.id
        first_name = user.first_name

        await States.change_avatar_state.set()

        text = f'{first_name}, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é..\n\n' \
               f'/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.\n' \
               f'/delete - —É–¥–∞–ª–∏—Ç—å –∞–≤–∞—Ç–∞—Ä.'

        await call.answer(text, show_alert=True)

        @dp.message_handler(state=States.change_avatar_state, content_types=['text', 'photo'])
        async def get_avatar(message: types.Message, state: FSMContext):
            text = message.text
            photo = message.photo

            if text == '/cancel':
                await message.answer('–¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
                await state.finish()
                return

            elif text == '/delete':
                db.delete_avatar(user_id)

            if photo:
                db.set_avatar(user_id, photo[-1].file_id)

            profile = db.get_profile(user_id)
            nick = profile[1]
            team_name = profile[2]
            avatar = profile[3]

            text = f'üí¨ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å..\n\n' \
                   f'üßë‚Äçüíª –ù–∏–∫: {nick}\n' \
                   f'üë®‚Äçüë©‚Äçüë¶ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {team_name}\n' \
                   f'üñº –ê–≤–∞—Ç–∞—Ä: {"–µ—Å—Ç—å" if avatar else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}\n\n' \
                   f'/game - –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–≥—Ä–µ.'

            await call.message.edit_text(text, reply_markup=keyboard_for_profile)
            await state.finish()
    except Exception as error_msg:
        logging.info(f'–í —Ö—ç–Ω–¥–ª–µ—Ä–µ change_avatar_query –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "{error_msg}".')


@dp.callback_query_handler(text='game_menu')
async def game_menu_query(call: types.CallbackQuery):
    try:
        user = call.from_user
        user_id = user.id

        if not db.profile_exist(user_id):
            await call.message.answer('‚ö† –°–Ω–∞—á–∞–ª–∞ –í–∞–º –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: /start')
            return

        profile = db.get_profile(user_id)
        nick = profile[1]
        team_name = profile[2]
        avatar = profile[3]

        text = f'‚úç –ü—Ä–µ–∂–¥–µ, —á–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ –í–∞–º –Ω–∞–¥–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥!'

        await call.message.edit_text(text, reply_markup=keyboard_for_game_menu)
        await call.answer()
    except Exception as error_msg:
        logging.info(f'–í —Ö—ç–Ω–¥–ª–µ—Ä–µ game_menu_query –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "{error_msg}".')


@dp.callback_query_handler(text='input_code')
async def input_code_query(call: types.CallbackQuery):
    try:
        user = call.from_user
        user_id = user.id
        first_name = user.first_name

        await States.input_code_state.set()

        text = f'{first_name}, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–≥—Ä–µ..\n\n' \
               f'/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.'

        await call.answer(text, show_alert=True)

        @dp.message_handler(state=States.input_code_state, content_types='text')
        async def get_input_code(message: types.Message, state: FSMContext):
            code = message.text

            if code == '/cancel':
                await message.answer('–¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
                await state.finish()
                return

            if db.game_exist(code):
                await message.answer('–ò–≥—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞ üîé –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"..')
                await States.game_state.set()

            else:
                await message.answer(f'–ò–≥—Ä–∞ —Å –∫–æ–¥–æ–º "{code}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üîé –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞..')
    except Exception as error_msg:
        logging.info(f'–í —Ö—ç–Ω–¥–ª–µ—Ä–µ input_code_query –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "{error_msg}".')


@dp.callback_query_handler(text='game_connection', state=States.game_state)
async def game_connection_query(call: types.CallbackQuery):
    try:
        user = call.from_user
        user_id = user.id
        first_name = user.first_name

        # –ó–¥–µ—Å—å –Ω–∞–¥–æ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!
        text = f'{first_name}, –æ—Ç–ª–∏—á–Ω–æ! –î–æ–∂–¥–∏—Ç–µ—Å—å —Å—Ç–∞—Ä—Ç–∞.'

        await call.answer(text, show_alert=True)

    except Exception as error_msg:
        logging.info(f'–í —Ö—ç–Ω–¥–ª–µ—Ä–µ game_connection_query –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: "{error_msg}".')


# ------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ -------------
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(set_commands(bot))
    executor.start_polling(dp, skip_updates=True)
